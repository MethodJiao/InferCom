{"prompt": "# Copyright 2024 The Penzai Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Tests for shapecheck.\"\"\"\n\nimport textwrap\n\nfrom absl.testing import absltest\nimport jax\nimport jax.numpy as jnp\nimport numpy as np\nfrom penzai import pz\n\n\nclass ShapecheckTest(absltest.TestCase):\n\n  def test_same_empty(self):\n    match = pz.chk.check_structure(value=[], pattern=[])\n    self.assertEqual(dict(match), {})\n\n  def test_same_objects(self):\n    match = pz.chk.check_structure(\n        value=[\"a\", (1, 2, 3), np.array([3, 5]), (\"foo\", \"bar\")],\n        pattern=[\"a\", (1, 2, 3), np.array([3, 5]), pz.chk.ANY],\n    )\n    self.assertEqual(dict(match), {})\n\n  def test_object_mismatches(self):\n    err = textwrap.dedent(\"\"\"\\\n    Mismatch while checking structures:\n    At root[0]: Value 'a' was not equal to the non-ArraySpec pattern 'b'.\n    At root[1][0]: Value 1 was not equal to the non-ArraySpec pattern 3.\n    At root[1][2]: Value 3 was not equal to the non-ArraySpec pattern 1.\n    At root[2]: Value array([3, 5]) was not equal to the non-ArraySpec pattern array([3, 6]).\n    At root[3]: Value ('foo', 'bar') was not equal to the non-ArraySpec pattern 100.\n    \"\"\").rstrip()\n    with self.assertRaisesWithLiteralMatch(pz.chk.StructureMismatchError, err):\n      pz.chk.check_structure(\n          value=[\"a\", (1, 2, 3), np.array([3, 5]), (\"foo\", \"bar\")],\n          pattern=[\"b\", (3, 2, 1), np.array([3, 6]), 100],\n      )\n\n  def test_simple_array(self):\n    match = pz.chk.check_structure(\n        value={\"a\": jax.ShapeDtypeStruct(shape=(1, 2, 3), dtype=jnp.float32)},\n        pattern={\"a\": pz.chk.ArraySpec(shape=(1, 2, 3))},\n    )", "metadata": {"task_id": "penzai-main/0", "task_type": "sl", "ground_truth": "a\": pz.chk.ArraySpec(shape=(1, 2, 3))},", "fpath_tuple": ["penzai-main", "tests", "shapecheck_test.py"], "context_start_lineno": 0, "line_no": 57, "col": 18, "dep": "pz", "import_no": [23, 23]}, "pred_res": "\n    self.assertEqual(dict(match), {})\n", "choices": [{"text": "self.assertEqual(dict(match), {})"}]}
